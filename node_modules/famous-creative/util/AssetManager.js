class AssetManagerClass {
  constructor() {
    this.assets = {};
  }

  registerImageAssets(key, url) {
    var urls = (url instanceof Array) ? url : [url];
    this.assets[key] = new ImageAssets(urls);
    return this.assets[key];
  }

  registerDataAssets(key, url) {
    var urls = (url instanceof Array) ? url : [url];
    this.assets[key] = new DataAssets(urls);
    return this.assets[key];
  }

  get(key) {
    return this.assets[key];
  }

  //load asset group for this key
  load(key) {
    this.assets[key].load();
    return this.assets[key];
  }
}

class DataAssets{
  constructor(urls) {
    this.urls = urls;
    this.cache = {};
    this.onprogress = function() {};
    this.onload = function() {};
    this.onerror = function() {};
  }

  load() {
    var successHandler = cbCounter(this.urls.length, this.onload);
    for(var i=0; i<this.urls.length; i++) {
      var request = new XMLHttpRequest();

      request.onreadystatechange = function onreadystatechange (i, request) {
        if(request.readyState == 4) {
          this.cache[this.urls[i]] = request.responseText;
          this.onprogress();
          successHandler();
        }
      }.bind(this, i, request);

      request.onerror = this.onerror;
      request.open('GET', this.urls[i]);
      request.send();
    }
  }

  getData() {
    return this.cache;
  }
}

class ImageAssets {
  constructor(urls) {
    this.urls = urls;
    this.onprogress = function() {};
    this.onload = function() {};
    this.onerror = function() {};
  }

  load() {
    var successHandler = cbCounter(this.urls.length, this.onload);
    for(var i=0; i<this.urls.length; i++) {
      var img = new Image;
      img.src = this.urls[i];
      img.onload = function() {
        this.onprogress();
        successHandler();
      }.bind(this);
      img.onerror = this.onerror;
    }
  }
}

function cbCounter(n, cb) {
  var counter = n;
  return function() {
    counter--;
    if(counter == 0) cb();
  }
}

export var AssetManager = new AssetManagerClass();