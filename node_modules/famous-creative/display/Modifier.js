/**
 * Base class which contains all modifiers and contains no visual components.
 */

const Align = FamousPlatform.components.Align;
const MountPoint = FamousPlatform.components.MountPoint;
const Opacity = FamousPlatform.components.Opacity;
const Origin = FamousPlatform.components.Origin;
const Position = FamousPlatform.components.Position;
const Rotation = FamousPlatform.components.Rotation;
const Scale = FamousPlatform.components.Scale;
const Size = FamousPlatform.components.Size;

export default class Modifier {
  constructor(node) {
    this.node = node;
  }

  addChild() {
    return this.node.addChild();
  }

  // ---------------------------------------------------------------------------
  // helpers for Size enums
  static get RELATIVE_SIZE() {
    return Size.RELATIVE;
  }
  static get ABSOLUTE_SIZE() {
    return Size.ABSOLUTE;
  }
  static get RENDER_SIZE() {
    return Size.RENDER;
  }
  static get DEFAULT_SIZE() {
    return Size.DEFAULT;
  }

  // ---------------------------------------------------------------------------
  // helpers for align
  validateAlign() {
    if (!this.align) this.align = new Align(this.node);
  }
  haltAlign() {
    this.validateAlign();
    this.align.halt();
    return this;
  }
  // Align getters
  getAlignValue() {
    this.validateAlign();
    return this.align.getValue();
  }
  getAlignX() {
    this.validateAlign();
    return this.align.getX();
  }

  getAlignY() {
    this.validateAlign();
    return this.align.getY();
  }
  getAlignZ() {
    this.validateAlign();
    return this.align.getZ();
  }
  // Align setters
  setAlignValue() {
    this.validateAlign();
    this.align.setValue(...arguments);
    return this;
  }
  setAlign() {
    this.validateAlign();
    this.align.set(...arguments);
    return this;
  }
  setAlignX() {
    this.validateAlign();
    this.align.setX(...arguments);
    return this;
  }
  setAlignY() {
    this.validateAlign();
    this.align.setY(...arguments);
    return this;
  }
  setAlignZ() {
    this.validateAlign();
    this.align.setZ(...arguments);
    return this;
  }

  // ---------------------------------------------------------------------------
  // helpers for mount point
  validateMountPoint() {
    if (!this.mountpoint) this.mountpoint = new MountPoint(this.node);
  }
  haltMountPoint() {
    this.validateMountPoint();
    this.mountpoint.halt();
    return this;
  }
  // MountPoint getters
  getMountPointValue() {
    this.validateMountPoint();
    return this.mountpoint.getValue();
  }
  getMountPointX() {
    this.validateMountPoint();
    return this.mountpoint.getX();
  }
  getMountPointY() {
    this.validateMountPoint();
    return this.mountpoint.getY();
  }
  getMountPointZ() {
    this.validateMountPoint();
    return this.mountpoint.getZ();
  }
  // MountPoint setters
  setMountPointValue() {
    this.validateMountPoint();
    this.mountpoint.setValue(...arguments);
    return this;
  }
  setMountPoint() {
    this.validateMountPoint();
    this.mountpoint.set(...arguments);
    return this;
  }
  setMountPointX() {
    this.validateMountPoint();
    this.mountpoint.setX(...arguments);
    return this;
  }
  setMountPointY() {
    this.validateMountPoint();
    this.mountpoint.setY(...arguments);
    return this;
  }
  setMountPointZ() {
    this.validateMountPoint();
    this.mountpoint.setZ(...arguments);
    return this;
  }

  // ---------------------------------------------------------------------------
  // helpers for opacity
  validateOpacity() {
    if (!this.opacity) this.opacity = new Opacity(this.node);
  }
  haltOpacity() {
    this.validateOpacity();
    this.opacity.halt();
    return this;
  }
  // Opacity getters
  getOpacityValue() {
    this.validateOpacity();
    return this.opacity.getValue();
  }
  getOpacity() {
    this.validateOpacity();
    return this.opacity.get();
  }
  // Opacity setters
  setOpacityValue() {
    this.validateOpacity();
    this.opacity.setValue(...arguments);
    return this;
  }
  setOpacity() {
    this.validateOpacity();
    this.opacity.set(...arguments);
    return this;
  }

  // ---------------------------------------------------------------------------
  // helpers for origin
  validateOrigin() {
    if (!this.origin) this.origin = new Origin(this.node);
  }
  haltOrigin() {
    this.validateOrigin();
    this.origin.halt();
    return this;
  }
  // Origin getters
  getOriginValue() {
    this.validateOrigin();
    return this.origin.getValue();
  }
  getOriginX() {
    this.validateOrigin();
    return this.origin.getX();
  }
  getOriginY() {
    this.validateOrigin();
    return this.origin.getY();
  }
  getOriginZ() {
    this.validateOrigin();
    return this.origin.getZ();
  }
  // Origin setters
  setOriginValue() {
    this.validateOrigin();
    this.origin.setValue(...arguments);
    return this;
  }
  setOrigin() {
    this.validateOrigin();
    this.origin.set(...arguments);
    return this;
  }
  setOriginX() {
    this.validateOrigin();
    this.origin.setX(...arguments);
    return this;
  }
  setOriginY() {
    this.validateOrigin();
    this.origin.setY(...arguments);
    return this;
  }
  setOriginZ() {
    this.validateOrigin();
    this.origin.setZ(...arguments);
    return this;
  }

  // ---------------------------------------------------------------------------
  // helpers for position
  validatePosition() {
    if (!this.position) this.position = new Position(this.node);
  }
  haltPosition() {
    this.validatePosition();
    this.position.halt();
    return this;
  }
  // Position getters
  getPositionValue() {
    this.validatePosition();
    return this.position.getValue();
  }
  getPositionX() {
    this.validatePosition();
    return this.position.getX();
  }
  getPositionY() {
    this.validatePosition();
    return this.position.getY();
  }
  getPositionZ() {
    this.validatePosition();
    return this.position.getZ();
  }
  // Position setters
  setPositionValue() {
    this.validatePosition();
    this.position.setValue(...arguments);
    return this;
  }
  setPosition() {
    this.validatePosition();
    this.position.set(...arguments);
    return this;
  }
  setPositionX() {
    this.validatePosition();
    this.position.setX(...arguments);
    return this;
  }
  setPositionY() {
    this.validatePosition();
    this.position.setY(...arguments);
    return this;
  }
  setPositionZ() {
    this.validatePosition();
    this.position.setZ(...arguments);
    return this;
  }

  // ---------------------------------------------------------------------------
  // helpers for rotation
  validateRotation() {
    if (!this.rotation) this.rotation = new Rotation(this.node);
  }
  haltRotation() {
    this.validateRotation();
    this.rotation.halt();
    return this;
  }
  // Rotation getters
  getRotationValue() {
    this.validateRotation();
    return this.rotation.getValue();
  }
  getRotationX() {
    this.validateRotation();
    return this.rotation.getX();
  }
  getRotationY() {
    this.validateRotation();
    return this.rotation.getY();
  }
  getRotationZ() {
    this.validateRotation();
    return this.rotation.getZ();
  }
  // Rotation setters
  setRotationValue() {
    this.validateRotation();
    this.rotation.setValue(...arguments);
    return this;
  }
  setRotation() {
    this.validateRotation();
    this.rotation.set(...arguments);
    return this;
  }
  setRotationX() {
    this.validateRotation();
    this.rotation.setX(...arguments);
    return this;
  }
  setRotationY() {
    this.validateRotation();
    this.rotation.setY(...arguments);
    return this;
  }
  setRotationZ() {
    this.validateRotation();
    this.rotation.setZ(...arguments);
    return this;
  }

  // ---------------------------------------------------------------------------
  // helpers for scale
  validateScale() {
    if (!this.scale) this.scale = new Scale(this.node);
  }
  haltScale() {
    this.validateScale();
    this.scale.halt();
    return this;
  }
  // Scale getters
  getScaleValue() {
    this.validateScale();
    return this.scale.getValue();
  }
  getScaleX() {
    this.validateScale();
    return this.scale.getX();
  }
  getScaleY() {
    this.validateScale();
    return this.scale.getY();
  }
  getScaleZ() {
    this.validateScale();
    return this.scale.getZ();
  }
  // Scale setters
  setScaleValue() {
    this.validateScale();
    this.scale.setValue(...arguments);
    return this;
  }
  setScale() {
      if(window.miketest) debugger;
    this.validateScale();
    this.scale.set(...arguments);
    return this;
  }
  setScaleX() {
    this.validateScale();
    this.scale.setX(...arguments);
    return this;
  }
  setScaleY() {
    this.validateScale();
    this.scale.setY(...arguments);
    return this;
  }
  setScaleZ() {
    this.validateScale();
    this.scale.setZ(...arguments);
    return this;
  }

  // ---------------------------------------------------------------------------
  // helpers for size
  validateSize() {
    if (!this.size) this.size = new Size(this.node);
  }
  haltSize() {
    this.validateSize();
    this.size.halt();
    return this;
  }
  // Size getters
  getSizeValue() {
    this.validateSize();
    return this.size.getValue();
  }
  getSize() {
    this.validateSize();
    return this.size.get();
  }
  // Size setters
  setSizeValue() {
    this.validateSize();
    this.size.setValue(...arguments);
    return this;
  }
  setDifferentialSize() {
    this.validateSize();
    this.size.setDifferential(...arguments);
    return this;
  }
  setProportionalSize() {
    this.validateSize();
    this.size.setProportional(...arguments);
    return this;
  }
  setAbsoluteSize() {
    this.validateSize();
    this.size.setAbsolute(...arguments);
    return this;
  }
  setSizeMode(x, y, z) {
    this.node.setSizeMode(x, y, z);
    return this;
  }
  setSizeModeAbsolute() {
    this.node.setSizeMode(Size.ABSOLUTE, Size.ABSOLUTE, Size.ABSOLUTE);
    return this;
  }
  setSizeModeRelative() {
    this.node.setSizeMode(Size.RELATIVE, Size.RELATIVE, Size.RELATIVE);
    return this;
  }
  setSizeModeRender() {
    this.node.setSizeMode(Size.RENDER, Size.RENDER, Size.RENDER);
    return this;
  }
}
